state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
state_df <- subset_state(COUNTRY_DF, STATE)
View(state_df)
View(state_df)
knitr::include_graphics(sprintf("../Data/Lation Pop_maps/%s.png", STATE))
getwd()
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(flexdashboard)
library(stringr)
library(tidyverse)
library(flexdashboard)
library(stringr)
valueBox('55', color = 'red')
getwd()
getwd()
library('icon')
packages.install('icon')
install.packages("icon")
icon("calendar;)")
icon("calendar")
library('icon')
valueBox('boxTitle', color = 'maroon', icon ="calendar")
install.packages("font-awesome")
install.packages("font-awesome")
getwd()
library('font-awesome')
library('font-awesome')
knitr::opts_chunk$set(echo = FALSE)
library(font-awesome)
library(fontawesome)
library('font-awesome')
library(fontawesome)
icon(name, class = NULL, lib = "font-awesome")
library(fontawesome)
load.fontawesome()
install.packages("remotes")
remotes::install_github("rstudio/fontawesome")
library(fontaweomse)
library("font-awesome")
library(font-awesome)
library(fontawesome)
valueBox('boxTitle', color = 'maroon', icon ="fa-arrow-up")
library(icon)
library(fontawesome)
library(tidyverse)
#install.packages("remotes")
#remotes::install_github("rstudio/fontawesome")
library(fontawesome)
library(flexdashboard)
library(stringr)
fa("r-project", fill = "blue")
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population')]
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Mexican.Pop", "Total.Pop", 'Pctmex', "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Mexican Population", "Total Population", 'Percent Mexican', "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
state_df <- subset_state(COUNTRY_DF, STATE)
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population')]
View(demog_df)
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_df <- state_df[, c('District', "Representative",  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
View(trade_df)
View(COUNTRY_DF)
View(trade_df)
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Mexican.Pop", "Total.Pop", 'Pctmex', "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Mexican Population", "Total Population", 'Percent Mexican', "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
state_df <- subset_state(COUNTRY_DF, STATE)
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_df <- state_df[, c('District', "Representative",  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
shape = '../Data/District_shapes/Ohio 1st.jpg'
View(COUNTRY_DF)
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
#install.packages("remotes")
#remotes::install_github("rstudio/fontawesome")
library(fontawesome)
library(flexdashboard)
library(stringr)
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Mexican.Pop", "Total.Pop", 'Pctmex', "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Mexican Population", "Total Population", 'Percent Mexican', "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
state_df <- subset_state(COUNTRY_DF, STATE)
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_df <- state_df[, c('District', "Representative",  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
shape = '../Data/District_shapes/Ohio 1st.png'
View(COUNTRY_DF)
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", 'Pctmex', "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", 'Percent Mexican', "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
state_df <- subset_state(COUNTRY_DF, STATE)
demog_df <- state_df[, c('District', 'Representative', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_df <- state_df[, c('District', "Representative",  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
shape = '../Data/District_shapes/Ohio 1st.png'
View(state_df)
#valueBox(42, caption = "jobs", icon="fas fa-briefcase")
valueBox(247, caption = "trade", icon=knitr::include_graphics(shape), color='maroon')
valueBox(42, caption = "jobs", icon="fas fa-briefcase")
knitr::include_graphics(shape)
#will replace this with iterative generation
state_df %>% dplyr::filter(Namelsad == DIST)
DIST <- 'Ohio 1st'
state_df %>% dplyr::filter(Namelsad == DIST)
state_df %>% dplyr::filter(District == DIST)
(state_df %>% dplyr::filter(District == DIST))[['Party Affiliation']]
(state_df %>% dplyr::filter(District == DIST))[['Representative', 'Party Affiliation']]
(state_df %>% dplyr::filter(District == DIST))[['Representative']]
(state_df %>% dplyr::filter(District == DIST))[['Representative', 'Party Affiliation']]
(state_df %>% dplyr::filter(District == DIST)) %>% select("Representative")
(state_df %>% dplyr::filter(District == DIST)) %>% select("Representative", "Party Affiliation")
r, p <- (state_df %>% dplyr::filter(District == DIST)) %>% select("Representative", "Party Affiliation")
g(r, p) <- (state_df %>% dplyr::filter(District == DIST)) %>% select("Representative", "Party Affiliation")
g(r, p) <- list((state_df %>% dplyr::filter(District == DIST)) %>% select("Representative", "Party Affiliation"))
list((state_df %>% dplyr::filter(District == DIST)) %>% select("Representative", "Party Affiliation"))
rep <- state_df %>% dplyr::filter(District == DIST)) %>% select("Representative")#, "Party Affiliation")
rep <- state_df %>% dplyr::filter(District == DIST) %>% select("Representative")#, "Party Affiliation")
View(rep)
type(rep)
class(rep)
rep <- list(state_df %>% dplyr::filter(District == DIST) %>% select("Representative")#, "Party Affiliation")
rep <- list(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))#, "Party Affiliation")
rep <- c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))#, "Party Affiliation")
rep
class(rep)
rep <- c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))#, "Party Affiliation")
rep <- c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))[[1]]#, "Party Affiliation")
rep
rep <- state_df %>% dplyr::filter(District == DIST) %>% select("Representative")[[1]]#, "Party Affiliation")
rep <- c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))#, "Party Affiliation")
rep <- c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))[[1]]#, "Party Affiliation")
rep
c(state_df %>% dplyr::filter(District == DIST) %>% select("Representative"))
district_info <- function(state_df, dist, col_) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col_))[[1]]
}
district_info <- function(state_df, dist, col_) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col_))[[1]]
}
state_df <- subset_state(COUNTRY_DF, STATE)
#will replace this with iterative generation
DIST <- 'Ohio 1st'
rep <- district_info(state_df, DIST, "Representative")
party <- district_info(state_df, DIST, "Party Affiliation")
district_info <- function(state_df, dist, col) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col))[[1]]
}
state_df <- subset_state(COUNTRY_DF, STATE)
#will replace this with iterative generation
DIST <- 'Ohio 1st'
rep <- district_info(state_df, DIST, "Representative")
party <- district_info(state_df, DIST, "Party Affiliation")
demog_df <- state_df[, c('District', 'Representative', 'Party Affiliation', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_df <- state_df[, c('District', "Representative", 'Party Affiliation',  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
mex_pop <- district_info(state_df, DIST, "Mexican Population")
DIST <- 'Ohio 1st'
rep <- district_info(state_df, DIST, "Representative")
party <- district_info(state_df, DIST, "Party Affiliation")
mex_pop <- district_info(state_df, DIST, "Mexican Population")
shape = (sprintf('../Data/District_shapes/%s.png', DIST))
party_icon <- ifelse(party == 'Republican', "fas fa-republican", ifelse(party == 'Democrat', "fas fa-democrat", 'fas fa-flag-usa'))
fontawesome::fa_png(shape)
fontawesome
library(fontawesome)
#valid colors can be found at https://www.rdocumentation.org/packages/shinydashboard/versions/0.7.1/topics/validColors
valueBox(mex_pop, caption = "Mexican Population", icon="fas fa-republican")
#valueBox('box 3', color = 'maroon')
valueBox(247, caption = "trade", icon="fas fa-globe-americas", color='maroon')
packes.update()
update.packages()
update.packages(fontawesome)
update.packages('fontawesome')
fontawesome::fa(file:///C:/Users/Ray/Downloads/republican-solid.svg)
fontawesome::fa('file:///C:/Users/Ray/Downloads/republican-solid.svg')
fontawesome::fa('file:///C:/Users/Ray/Downloads/republican-solid.svg')
test <- fontawesome::fa('file:///C:/Users/Ray/Downloads/republican-solid.svg')
getwd()
test <- fontawesome::fa('../../../../Downloads/republican-solid.svg')
fontawesome::fa('../../../../Downloads/republican-solid.svg')
test <- fontawesome::fa('../../../../Downloads/republican-solid.svg')
test
party_icon <- ifelse(party == 'Republican', "fas fa-republican-alt", ifelse(party == 'Democrat', "fas fa-democrat-alt", 'fas fa-flag-usa'))
valueBox(rep, caption = "Representative", icon=party_icon, color='maroon')
`r icon::fa("rocket")`
`r icon::fa("rocket")`
r icon::fa("rocket")
devtools::install_github("ropenscilabs/icon")
install.packages("devtools")
devtools::install_github("ropenscilabs/icon")
icon::fa("rocket")
icon::fa("republican")
`r fa_rocket(colour = "#1FA67A")` + `r fa_r_project(colour = "#384CB7")` = `r fa_heart(colour = "red")`
fa_rocket(colour = "#1FA67A") + fa_r_project(colour = "#384CB7") = fa_heart(colour = "red")
HTML(<i class="fas fa-republican"></i>)
HTML('<i class="fas fa-republican"></i>')
install.packages("HTML")
fa::icon('rocket')
icon::fa("rocket")
icon::fa("rocket")
valueBox(rep, caption = "Representative", icon="fas fa-person-booth", color='maroon')
valueBox(rep, caption = "Representative", icon="fas fa-male", color='maroon')
library("fontawesome')")
library("fontawesome")
update.packages("fontawesome")
party <- district_info(state_df, DIST, "Party Affiliation")[[1]]
party <- district_info(state_df, DIST, "Party Affiliation")
party <- district_info(state_df, DIST, "Party Affiliation")[[1]]
party
party[[1]]
party[[2]]
substr(party, 1, 1)
party <- c("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")")
party
party <- c((, substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ))
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")")
party
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")", sep = "")
party
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")", sep = "")
rep <- district_info(state_df, DIST, "Representative")
rep <- paste(rep, party, sep= " ")
rep
valueBox?
?
)
library(DT)
#knitr::kable(
# demog_table, booktabs = TRUE,
#  caption = sprintf('%s and its districts', STATE)
#)
datatable(demog_table)
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", 'Pctmex', "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", 'Percent Mexican', "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
district_info <- function(state_df, dist, col) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col))[[1]]
}
state_df <- subset_state(COUNTRY_DF, STATE)
#will replace this with iterative generation
DIST <- 'Ohio 1st'
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")", sep = "")
rep <- district_info(state_df, DIST, "Representative")
rep <- paste(rep, party, sep= " ")
mex_pop <- district_info(state_df, DIST, "Mexican Population")
shape = (sprintf('../Data/District_shapes/%s.png', DIST))
demog_table <- state_df[, c('District', 'Representative', 'Party Affiliation', 'Mexican Population', 'Total Population', 'Percent Mexican')]
trade_table <- state_df[, c('District', "Representative", 'Party Affiliation',  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
test <- fontawesome::fa('../../../../Downloads/republican-solid.svg')
#knitr::kable(
# demog_table, booktabs = TRUE,
#  caption = sprintf('%s and its districts', STATE)
#)
datatable(demog_table)
datatable(demog_table, options = list(dom = 't'))
#knitr::kable(
# demog_table, booktabs = TRUE,
#  caption = sprintf('%s and its districts', STATE)
#)
datatable(demog_table, options = list(dom = 't'), target = 'row') %>% formatStyle(backgroundColor = styleEqual(c(0, 1), c('gray', 'white')))
#knitr::kable(
# demog_table, booktabs = TRUE,
#  caption = sprintf('%s and its districts', STATE)
#)
datatable(demog_table, options = list(dom = 't') %>% formatStyle(target = 'row', backgroundColor = styleEqual(c(0, 1), c('gray', 'white')))
#knitr::kable(
# demog_table, booktabs = TRUE,
#  caption = sprintf('%s and its districts', STATE)
#)
datatable(demog_table, options = list(dom = 't')) %>% formatStyle(
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
#country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
district_info <- function(state_df, dist, col) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col))[[1]]
}
state_df <- subset_state(COUNTRY_DF, STATE)
#will replace this with iterative generation
DIST <- 'Ohio 2nd'
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")", sep = "")
rep <- district_info(state_df, DIST, "Representative")
rep <- paste(rep, party, sep= " ")
mex_pop <- district_info(state_df, DIST, "Mexican Population")
shape = (sprintf('../Data/District_shapes/%s.png', DIST))
demog_table <- state_df[, c('District', 'Representative', 'Party Affiliation', 'Mexican Population', 'Total Population', 'Percent Mexican')]
#Loading data, defining function
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
STATE <- "Ohio"  #would like to find a way to specify this from the command line
#Selects one specificed state from larger DF and takes a subset of the columns
subset_state <- function(country_df, state) {
#country_df$Pctmex <- round(country_df[['Mexican.Pop']] / country_df[['Total.Pop']] * 100, digits=0)
state_df <- country_df %>% dplyr::filter(Name == STATE)
state_df = state_df[, COLS]
for (col in colnames(state_df)) {
idx <- match(col, COLS)
state_df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(state_df)[names(state_df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
district_info <- function(state_df, dist, col) {
c(state_df %>% dplyr::filter(District == dist) %>% select(col))[[1]]
}
state_df <- subset_state(COUNTRY_DF, STATE)
#will replace this with iterative generation
DIST <- 'Ohio 2nd'
party <- paste("(", substr(district_info(state_df, DIST, "Party Affiliation"), 1, 1), ")", sep = "")
rep <- district_info(state_df, DIST, "Representative")
rep <- paste(rep, party, sep= " ")
mex_pop <- district_info(state_df, DIST, "Mexican Population")
shape = (sprintf('../Data/District_shapes/%s.png', DIST))
demog_table <- state_df[, c('District', 'Representative', 'Party Affiliation', 'Mexican Population', 'Total Population')]
trade_table <- state_df[, c('District', "Representative", 'Party Affiliation',  "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018" )]
test <- fontawesome::fa('../../../../Downloads/republican-solid.svg')
</center>
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
clean_df <- function(df) {
df = df[, COLS]
#for-loop takes subset of columns and cleans their names
for (col in colnames(df)) {
idx <- match(col, COLS)
df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(df)[names(df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
df <- clean_df(COUNTRY_DF)
clean_df <- function(df) {
df = df[, COLS]
#for-loop takes subset of columns and cleans their names
for (col in colnames(df)) {
idx <- match(col, COLS)
df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(df)[names(df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
df <- clean_df(COUNTRY_DF)
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
COLS <- c("Namelsad", "Representative", "Party.Affiliation",  "Mexican.Pop", "Total.Pop", "Exports.to.Mexico..2018..USD.Million.", "Total.Jobs..2018")
COL_NAMES <-c("District", "Representative", "Party Affiliation", "Mexican Population", "Total Population", "Exports to Mexico 2018 (USD Million)", "Total Jobs 2018")
clean_df <- function(df) {
df = df[, COLS]
#for-loop takes subset of columns and cleans their names
for (col in colnames(df)) {
idx <- match(col, COLS)
df[[col]] <- prettyNum(state_df[[col]],big.mark=",")
names(df)[names(df) == col] <- COL_NAMES[[idx]]
}
state_df$District <- factor(state_df$District, levels = str_sort(state_df$District, numeric=TRUE))
state_df = state_df[order(state_df$District),]
rownames(state_df) <- 1:nrow(state_df)
return(state_df)
}
df <- clean_df(COUNTRY_DF)
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
getwd()
getwd()
getwd()
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
setwd("~/wsl/git/us-mex_trade")
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
setwd("~/wsl/git/us-mex_trade/Script")
COUNTRY_DF <- read.csv(file = '../Data/factsheet_data.csv')
View(COUNTRY_DF)
View(COUNTRY_DF)
View(COUNTRY_DF)
test = ''
test + 1
test + 'a'
test
test = paste(test, a)
test = paste(test, 'a')
test
test = paste(test, 'a', sep='')
test
'a' in test
'a' %in% test
str_contains(test, 'a')
grepl('a', test)
!grepl('a', test)
count = 0
count += 1
count + 1
count
for (char in ''){}
for (char in ''){
print(char)
}
grepl('', '')
c = NULL
paste(c, 'a')
paste(c, 'a', sep='')
c
grepl('', NULL)\
grepl('', NULL)
!NULL
